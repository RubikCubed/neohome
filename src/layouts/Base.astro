---
import { sleep } from "../utils";
import NavBar from "../components/NavBar.astro";
import "../styles/color.less";
import "../styles/base.less";
import "../styles/main.less";

import "../styles/iosevka-normal.css";
import "@fontsource/geist-sans";

import "../styles/alert.less";
import "../styles/code-copy.less";

import "../components/Button.astro"; // needed for global styles

const seoLinks = [
  "https://github.com/viperML",
  "https://linkedin.com/in/ayatsfer",
];

interface Props {
  title?: string | undefined;
  description?: string | undefined;
}

const finalTitle = "";
const finalDesc = "";
const url = "";

// const url = import.meta.url;
// const url = import.meta.url;
// console.log(import.meta);

import { ViewTransitions } from 'astro:transitions';
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <meta name="generator" content={Astro.generator} />

    <ViewTransitions />

    <link rel="icon" type="image/svg+xml" href="/img/logo.svg" />

    <slot name="head" />

    <!-- SEO -->
    <link rel="canonical" href={import.meta.env.SITE} />
    <title>{finalTitle}</title>
    <meta name="title" content={finalTitle} />
    <meta name="author" content="Fernando Ayats" />
    <meta name="description" content={finalDesc} />
    {
      seoLinks.map((link) => {
        return <link href={link} rel="me" />;
      })
    }
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- OpenGraph -->
    <meta property="og:title" content="ayats.org" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={url} />
    <meta property="og:image" content="/og/foo.png" />
    <!-- <meta property="og:image" content={preview} /> -->
  </head>

  <body class="flex flex-col items-center">
    <NavBar class="col-span-full row-span-1" />

    <slot />
  </body>
</html>

<style is:global></style>

<script is:inline data-astro-rerun>
  // This script automatically loads the theme from either the user's preference
  // or from localStorage
  const setTheme = ((document) => {
    const theme = (() => {
      if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
        return localStorage.getItem("theme");
      }
      if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
        return "dark";
      }
      return "light";
    })();

    if (theme === "light") {
      document.documentElement.classList.remove("dark");
    } else {
      document.documentElement.classList.add("dark");
    }

    window.localStorage.setItem("theme", theme);
  });

  setTheme(document);

  document.addEventListener('astro:before-swap', ev => {
    setTheme(ev.newDocument);
  });

  const x = Array.from(document.getElementsByClassName("theme-toggle")).forEach(
    (elem) => {
      elem.addEventListener("click", () => {
        document.documentElement.classList.remove("theme-loaded");
        const element = document.documentElement;
        element.classList.toggle("dark");

        const isDark = element.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");

        setTimeout(() => {
          document.documentElement.classList.add("theme-loaded");
        }, 10);
      });
    },
  );
</script>

<script>
  setTimeout(() => {
    document.documentElement.classList.add("theme-loaded");
  }, 10);
</script>

<script>
  import { sleep } from "../utils";

  Array.from(document.getElementsByClassName("code-copy")).forEach((button) => {
    button.addEventListener("click", async () => {
      const text = button.parentElement?.textContent;
      if (typeof text === "string") {
        const type = "text/plain";
        const blob = new Blob([text], { type });
        const data = [new ClipboardItem({ [type]: blob })];
        await navigator.clipboard.write(data);

        button.classList.add("active");

        console.log("START");
        await sleep(2000);
        console.log("DONE");

        button.classList.remove("active");
      }
    });
  });
</script>
